{"version":3,"sources":["components/navbar.js","components/countries.js","components/forms.js","components/Home.js","components/country.js","App.js","serviceWorker.js","index.js","components/css/country.module.css"],"names":["Nav","className","id","Countries","flag","name","population","region","capital","to","src","loading","alt","Forms","select","search","handleSelect","handleChange","type","placeholder","value","onChange","Home","useState","countries","setCountries","setSearch","choose","setChoose","url","setUrl","useEffect","fetch","then","response","json","data","fewData","splice","console","log","e","target","newUrl","length","map","country","key","alpha3Code","href","Country","history","match","setCountry","code","params","style","container","button","onClick","push","wrapper","details","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7183c960.chunk.js","sourcesContent":["import React from \"react\";\r\n//import style from \"./css/navbar.module.css\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className=\"head\">\r\n      <h2 className=\"heading\">Where in the world ?</h2>\r\n\r\n      <div className=\"switch\" id=\"mode\">\r\n        <div>\r\n          <span id=\"dark-mode-text\">Dark Mode</span>\r\n          <span className=\"mode-text\">Light Mode</span>\r\n          <div className=\"switcher\" id=\"switcher\">\r\n            <div className=\"inner-circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n//import Style from \"./css/countries.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Countries = ({ id, flag, name, population, region, capital }) => {\r\n  return (\r\n    <div className=\"menu-item\">\r\n      <Link to={`/${id}`}>\r\n        <img src={flag} loading=\"lazy\" alt=\"Country Flag\" className=\"img\" />\r\n      </Link>\r\n\r\n      <div className=\"wrapper\">\r\n        <h3>{name}</h3>\r\n        <p>\r\n          <span className=\"title\">Capital:</span> {capital}\r\n        </p>\r\n        <p>\r\n          <span className=\"title\">Population:</span> {population}\r\n        </p>\r\n        <p>\r\n          <span className=\"title\">Region:</span> {region}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React from \"react\";\r\n//import Style from \"./css/forms.module.css\";\r\n\r\nconst Forms = ({ select, search, handleSelect, handleChange }) => {\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"forms\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"Search by countries...\"\r\n            value={search}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"select\">\r\n          <select className=\"choose\" value={select} onChange={handleSelect}>\r\n            <option value=\"\">Filter by Region</option>\r\n            <option value=\"Africa\">Africa</option>\r\n            <option value=\"Americas\">Americas</option>\r\n            <option value=\"Asia\">Asia</option>\r\n            <option value=\"Europe\">Europe</option>\r\n            <option value=\"Oceania\">Oceania</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forms;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Countries from \"./countries\";\r\nimport Forms from \"./forms\";\r\n\r\nfunction Home() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [choose, setChoose] = useState(\"\");\r\n  const [url, setUrl] = useState(\"https://restcountries.eu/rest/v2/all\");\r\n\r\n  //const url = \"https://restcountries.eu/rest/v2/all\";\r\n  //urlSelect = `https://restcountries.eu/rest/v2/region/${region}`;\r\n\r\n  useEffect(() => {\r\n    const getItems = () => {\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const fewData = data.splice(0, 12);\r\n          console.log(fewData);\r\n          setCountries(fewData);\r\n        });\r\n    };\r\n\r\n    getItems();\r\n  }, [url]);\r\n\r\n  const onChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const onSelect = (e) => {\r\n    setChoose(e.target.value);\r\n    let region = e.target.value;\r\n    let newUrl = `https://restcountries.eu/rest/v2/region/${region}`;\r\n    region !== \"\" ? setUrl(newUrl) : setUrl(url);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Forms\r\n        handleChange={onChange}\r\n        search={search}\r\n        select={choose}\r\n        handleSelect={onSelect}\r\n      />\r\n\r\n      <div className=\"holder\">\r\n        <p className=\"count\">{countries.length} countries</p>\r\n        <div className=\"item-container\">\r\n          {countries.map((country) => (\r\n            <Countries\r\n              key={country.alpha3Code}\r\n              flag={country.flag}\r\n              name={country.name}\r\n              capital={country.capital}\r\n              population={country.population}\r\n              region={country.region}\r\n              id={country.alpha3Code}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"footer\">\r\n        <p>\r\n          copyright &copy; <a href=\"https://github.com/horler408\">HorlerTech</a>\r\n          <span id=\"date\">2020</span>. All right reserved\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport style from \"./css/country.module.css\";\r\n\r\nexport default function Country({ history, match }) {\r\n  console.log(match);\r\n  const [country, setCountry] = useState([]);\r\n\r\n  const code = match.params.id;\r\n  const url = `https://restcountries.eu/rest/v2/alpha/${code}`;\r\n\r\n  useEffect(() => {\r\n    const getCountry = () => {\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          setCountry(data);\r\n        });\r\n    };\r\n    getCountry();\r\n  }, [url]);\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.button}>\r\n        <button onClick={() => history.push(\"/\")}>Back</button>\r\n      </div>\r\n      <div className={style.wrapper}>\r\n        <div className={style.flag}>\r\n          <img src={country.flag} loading=\"lazy\" alt=\"Country Flag\" />\r\n        </div>\r\n        <div className={style.details}>\r\n          <h2>{country.name}</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Nav from \"./components/navbar\";\nimport Home from \"./components/Home\";\nimport Country from \"./components/country\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/:id\" component={Country} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"country_container__7kREx\",\"wrapper\":\"country_wrapper__2vfMN\",\"flag\":\"country_flag__1BNjs\",\"details\":\"country_details__1jfXh\",\"button\":\"country_button__3_4Wq\"};"],"sourceRoot":""}